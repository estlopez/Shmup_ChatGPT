# Unreal Editor Python: scaffold_blueprints.py
# Creates a set of Blueprint assets for a PS1-style shmup (Einhänder-like) scaffold.
# Tested conceptually for Unreal Editor Python APIs (unreal module).
# Run inside the Unreal Editor's Python environment.

import unreal

# ---------- Config ----------
DEST_PATH = "/Game/Blueprints/AutoGenerated"
BLUEPRINT_NAMES = {
    # Actors / Pawns
    "PlayerShip": unreal.Pawn,
    "BaseShip": unreal.Actor,
    "EnemyShip": unreal.Actor,
    "BossShip": unreal.Actor,

    # Projectiles
    "BaseProjectile": unreal.Actor,
    "PlayerProjectile": unreal.Actor,
    "EnemyProjectile": unreal.Actor,

    # Systems
    "WeaponPickup": unreal.Actor,
    "StageController": unreal.Actor,
    "WaveSpawner": unreal.Actor,
    "ExplosionFX": unreal.Actor,
    "CameraController": unreal.Actor,

    # Manager
    "ShmupGameMode": unreal.GameModeBase,

    # HUD (Widget Blueprint)
    "ShmupHUD": "WidgetBlueprint",
}

# ---------- Helpers ----------
asset_tools = unreal.AssetToolsHelpers.get_asset_tools()
editor_asset_lib = unreal.EditorAssetLibrary
blueprint_factory = unreal.BlueprintFactory()
widget_factory = unreal.WidgetBlueprintFactory()

def ensure_folder(path):
    if not editor_asset_lib.does_directory_exist(path):
        unreal.EditorAssetLibrary.make_directory(path)
        unreal.log("Created folder: {}".format(path))

def create_blueprint(name, parent_class, dest_path=DEST_PATH):
    """Creates a blueprint asset with parent_class (unreal class or string 'WidgetBlueprint')."""
    pkg_path = dest_path
    asset_name = name
    full_path = "{}/{}".format(pkg_path, asset_name)

    # Determine factory and parent for widget vs normal blueprint
    if parent_class == "WidgetBlueprint":
        factory = widget_factory
        # widget factory expects setting the parent class to UserWidget
        factory.set_editor_property("parent_class", unreal.UserWidget)
        try:
            new_asset = asset_tools.create_asset(asset_name, pkg_path, unreal.WidgetBlueprint, factory)
        except Exception as e:
            unreal.log_error("Failed to create widget blueprint {}: {}".format(full_path, e))
            return None
    else:
        factory = unreal.BlueprintFactory()
        factory.set_editor_property("parent_class", parent_class)
        try:
            new_asset = asset_tools.create_asset(asset_name, pkg_path, unreal.Blueprint, factory)
        except Exception as e:
            unreal.log_error("Failed to create blueprint {}: {}".format(full_path, e))
            return None

    unreal.log("Created asset: {}/{}".format(pkg_path, asset_name))
    return new_asset

def add_component_to_blueprint(blueprint_asset, comp_name, comp_class):
    """
    Use BlueprintEditorLibrary to add a component to the blueprint.
    If not available or fails, logs a warning and continues.
    """
    try:
        bpl = unreal.BlueprintEditorLibrary
        # create a default subobject (Scene root if none exists)
        comp = bpl.add_component(blueprint_asset, comp_name, comp_class)
        unreal.log("  Added component '{}' ({}) to {}".format(comp_name, comp_class, blueprint_asset.get_name()))
        return comp
    except Exception as e:
        unreal.log_warning("  Could not add component {} to {}: {}".format(comp_name, blueprint_asset.get_name(), e))
        return None

def add_variable_to_blueprint(blueprint_asset, var_name, var_type, default_value=None, editable=True):
    """
    Add a member variable to a Blueprint.
    var_type should be a unreal.Property type, e.g. unreal.IntProperty, unreal.FloatProperty, unreal.BoolProperty, or struct/class (we'll use basic)
    """
    try:
        bpl = unreal.BlueprintEditorLibrary
        # var type descriptor — use Unreal's types by name
        success = bpl.add_member_variable(blueprint_asset, var_name, var_type)
        if not success:
            unreal.log_warning("  Failed to add variable {} to {}".format(var_name, blueprint_asset.get_name()))
            return False
        # Optionally set editable and default (needs setting on the generated class default object)
        if default_value is not None:
            # Get CDO and set property if possible
            generated_class = blueprint_asset.generated_class
            if generated_class:
                cdo = unreal.get_default_object(generated_class)
                try:
                    setattr(cdo, var_name, default_value)
                except Exception:
                    # Ignore if setting fails
                    pass
        unreal.log("  Added variable '{}' to {}".format(var_name, blueprint_asset.get_name()))
        return True
    except Exception as e:
        unreal.log_warning("  Exception adding variable {} to {}: {}".format(var_name, blueprint_asset.get_name(), e))
        return False

# ---------- Main ----------
def main():
    ensure_folder(DEST_PATH)

    created = {}

    # Create Blueprints
    for name, parent in BLUEPRINT_NAMES.items():
        unreal.log("Creating blueprint: {}".format(name))
        bp = create_blueprint(name, parent, DEST_PATH)
        if bp:
            created[name] = bp

    # Add a couple components & variables to key Blueprints
    # PlayerShip -> Pawn with StaticMeshComponent and FloatingPawnMovement
    player_bp = created.get("PlayerShip")
    if player_bp:
        # add root scene and mesh
        add_component_to_blueprint(player_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(player_bp, "ShipMesh", unreal.StaticMeshComponent)
        # add movement
        add_component_to_blueprint(player_bp, "ShipMovement", unreal.FloatingPawnMovement)
        # add variables
        add_variable_to_blueprint(player_bp, "Health", unreal.FloatProperty, default_value=100.0)
        add_variable_to_blueprint(player_bp, "Lives", unreal.IntProperty, default_value=3)
        add_variable_to_blueprint(player_bp, "CurrentWeaponIndex", unreal.IntProperty, default_value=0)
        add_variable_to_blueprint(player_bp, "TeamID", unreal.IntProperty, default_value=0)

    # BaseShip -> Actor base for enemies
    base_ship_bp = created.get("BaseShip")
    if base_ship_bp:
        add_component_to_blueprint(base_ship_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(base_ship_bp, "ShipMesh", unreal.StaticMeshComponent)
        add_variable_to_blueprint(base_ship_bp, "Health", unreal.FloatProperty, default_value=50.0)
        add_variable_to_blueprint(base_ship_bp, "TeamID", unreal.IntProperty, default_value=1)
        add_variable_to_blueprint(base_ship_bp, "IsAlive", unreal.BoolProperty, default_value=True)

    # EnemyShip inherits from BaseShip (we'll create it but user can manually set parent if needed)
    enemy_bp = created.get("EnemyShip")
    if enemy_bp:
        add_component_to_blueprint(enemy_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(enemy_bp, "EnemyMesh", unreal.StaticMeshComponent)
        add_variable_to_blueprint(enemy_bp, "Health", unreal.FloatProperty, default_value=30.0)
        add_variable_to_blueprint(enemy_bp, "ScoreValue", unreal.IntProperty, default_value=100)

    # BossShip
    boss_bp = created.get("BossShip")
    if boss_bp:
        add_component_to_blueprint(boss_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(boss_bp, "BossMesh", unreal.StaticMeshComponent)
        add_variable_to_blueprint(boss_bp, "Health", unreal.FloatProperty, default_value=2000.0)
        add_variable_to_blueprint(boss_bp, "Phase", unreal.IntProperty, default_value=0)

    # BaseProjectile
    base_proj = created.get("BaseProjectile")
    if base_proj:
        add_component_to_blueprint(base_proj, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(base_proj, "ProjectileMesh", unreal.StaticMeshComponent)
        add_component_to_blueprint(base_proj, "ProjectileMovement", unreal.ProjectileMovementComponent)
        add_variable_to_blueprint(base_proj, "Damage", unreal.FloatProperty, default_value=10.0)
        add_variable_to_blueprint(base_proj, "Lifetime", unreal.FloatProperty, default_value=5.0)

    # PlayerProjectile / EnemyProjectile - create minimal overrides (no new comps)
    for key in ("PlayerProjectile", "EnemyProjectile"):
        bp = created.get(key)
        if bp:
            add_component_to_blueprint(bp, "RootScene", unreal.SceneComponent)
            add_variable_to_blueprint(bp, "Damage", unreal.FloatProperty, default_value=8.0 if key=="PlayerProjectile" else 6.0)

    # WeaponPickup
    weapon_bp = created.get("WeaponPickup")
    if weapon_bp:
        add_component_to_blueprint(weapon_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(weapon_bp, "PickupMesh", unreal.StaticMeshComponent)
        add_variable_to_blueprint(weapon_bp, "WeaponID", unreal.IntProperty, default_value=0)
        add_variable_to_blueprint(weapon_bp, "PowerLevel", unreal.IntProperty, default_value=1)

    # StageController
    stage_bp = created.get("StageController")
    if stage_bp:
        add_component_to_blueprint(stage_bp, "RootScene", unreal.SceneComponent)
        add_variable_to_blueprint(stage_bp, "StageIndex", unreal.IntProperty, default_value=0)
        add_variable_to_blueprint(stage_bp, "TimeElapsed", unreal.FloatProperty, default_value=0.0)

    # WaveSpawner
    wave_bp = created.get("WaveSpawner")
    if wave_bp:
        add_component_to_blueprint(wave_bp, "RootScene", unreal.SceneComponent)
        add_variable_to_blueprint(wave_bp, "WaveIndex", unreal.IntProperty, default_value=0)
        add_variable_to_blueprint(wave_bp, "SpawnDelay", unreal.FloatProperty, default_value=2.0)

    # ExplosionFX
    expl_bp = created.get("ExplosionFX")
    if expl_bp:
        add_component_to_blueprint(expl_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(expl_bp, "FXParticle", unreal.ParticleSystemComponent)
        add_variable_to_blueprint(expl_bp, "DamageRadius", unreal.FloatProperty, default_value=150.0)

    # CameraController
    cam_bp = created.get("CameraController")
    if cam_bp:
        add_component_to_blueprint(cam_bp, "RootScene", unreal.SceneComponent)
        add_component_to_blueprint(cam_bp, "Camera", unreal.CameraComponent)
        add_variable_to_blueprint(cam_bp, "FollowOffset", unreal.VectorProperty, default_value=unreal.Vector(0,0,0))

    # GameMode (ShmupGameMode)
    gm_bp = created.get("ShmupGameMode")
    if gm_bp:
        add_variable_to_blueprint(gm_bp, "StartingLives", unreal.IntProperty, default_value=3)
        add_variable_to_blueprint(gm_bp, "CurrentScore", unreal.IntProperty, default_value=0)

    # Widget (HUD)
    hud_bp = created.get("ShmupHUD")
    if hud_bp:
        unreal.log("Widget blueprint created: {}".format(hud_bp.get_name()))
        # Typically you add text blocks and bindings in the UMG editor.

    # Save all created assets
    unreal.EditorAssetLibrary.save_directory(DEST_PATH)
    unreal.log("Blueprint scaffold generation completed. Check Content Browser: {}".format(DEST_PATH))

# Execute
main()
